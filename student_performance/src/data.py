# -*- coding: utf-8 -*-
"""data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cNpAjlEgFLiJrrasb-JCrJEBWXL1FQDw
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# Load cleaned dataset
cleaned_data_path = "/content/cleaned_student_performance.csv"
df = pd.read_csv(cleaned_data_path)

# Print column names to verify structure
print("Available columns in dataset:", df.columns)

# Ensure results directory exists
os.makedirs("results", exist_ok=True)

# ðŸ”¹ Convert categorical variables to numeric encoding
for col in df.select_dtypes(include=["object"]).columns:
    df[col] = df[col].astype("category").cat.codes

# ðŸ”¹ Compute and save summary statistics
summary_stats = df.describe()
summary_stats.to_csv("results/summary_statistics.txt")

# ðŸ”¹ Compute and save correlation matrix
correlation_matrix = df.corr()
correlation_matrix.to_csv("results/correlation_matrix.csv")

print(" Data analysis completed. Results saved.")

# ðŸ”¹ **Additional Analysis**
# Finding the highest and lowest scoring students
highest_math_score = df.loc[df["math_score"].idxmax()]
lowest_math_score = df.loc[df["math_score"].idxmin()]
average_math_score = df["math_score"].mean()

highest_reading_score = df.loc[df["reading_score"].idxmax()]
lowest_reading_score = df.loc[df["reading_score"].idxmin()]
average_reading_score = df["reading_score"].mean()

highest_writing_score = df.loc[df["writing_score"].idxmax()]
lowest_writing_score = df.loc[df["writing_score"].idxmin()]
average_writing_score = df["writing_score"].mean()

# Save additional analysis to a text file
with open("results/analysis_summary.txt", "w") as f:
    f.write("Student Performance Analysis\n")
    f.write("=============================\n\n")
    f.write(f"Highest Math Score: {highest_math_score['math_score']} (Student ID: {highest_math_score.name})\n")
    f.write(f"Lowest Math Score: {lowest_math_score['math_score']} (Student ID: {lowest_math_score.name})\n")
    f.write(f"Average Math Score: {average_math_score:.2f}\n\n")

    f.write(f"Highest Reading Score: {highest_reading_score['reading_score']} (Student ID: {highest_reading_score.name})\n")
    f.write(f"Lowest Reading Score: {lowest_reading_score['reading_score']} (Student ID: {lowest_reading_score.name})\n")
    f.write(f"Average Reading Score: {average_reading_score:.2f}\n\n")

    f.write(f"Highest Writing Score: {highest_writing_score['writing_score']} (Student ID: {highest_writing_score.name})\n")
    f.write(f"Lowest Writing Score: {lowest_writing_score['writing_score']} (Student ID: {lowest_writing_score.name})\n")
    f.write(f"Average Writing Score: {average_writing_score:.2f}\n\n")

print("Additional numerical analysis saved.")

# ðŸ“Œ **Visualization 1: Box Plot - Math Score Distribution by Gender**
plt.figure(figsize=(6, 4))
sns.boxplot(x=df["gender"], y=df["math_score"])
plt.title("Math Score Distribution by Gender")
plt.xlabel("Gender (Encoded)")
plt.ylabel("Math Score")
plt.grid()
plt.savefig("results/gender_math_score_distribution.png")
plt.show()
print(" Box Plot saved.")

# ðŸ“Œ **Visualization 2: Bar Chart - Parental Education Level vs Average Scores**
plt.figure(figsize=(8, 4))
df.groupby("parental_level_of_education")[["math_score", "reading_score", "writing_score"]].mean().plot(kind="bar")
plt.title("Parental Education Level vs Average Scores")
plt.ylabel("Average Score")
plt.xticks(rotation=45)
plt.grid()
plt.savefig("results/parental_education_vs_scores.png")
plt.show()
print(" Bar Chart saved.")

# ðŸ“Œ **Visualization 3: Grouped Bar Chart - Test Preparation Course vs Average Scores**
plt.figure(figsize=(6, 4))
sns.barplot(x=df["test_preparation_course"], y=df["math_score"], estimator=lambda x: x.mean(), ci=None)
plt.title("Test Preparation Course vs Math Score")
plt.xlabel("Test Preparation Course (Encoded)")
plt.ylabel("Average Math Score")
plt.grid()
plt.savefig("results/test_prep_vs_avg_scores.png")
plt.show()
print(" Test Prep Bar Chart saved.")

# ðŸ“Œ **Visualization 4: Bar Chart - Lunch Type vs Average Scores**
plt.figure(figsize=(6, 4))
sns.barplot(x=df["lunch"], y=df["math_score"], estimator=lambda x: x.mean(), ci=None)
plt.title("Lunch Type vs Math Score")
plt.xlabel("Lunch Type (Encoded)")
plt.ylabel("Average Math Score")
plt.grid()
plt.savefig("results/lunch_type_vs_avg_scores.png")
plt.show()
print("Lunch Type Bar Chart saved.")

# ðŸ“Œ **Visualization 5: Histogram - Math Score Distribution with Gender Comparison**
plt.figure(figsize=(8, 4))
sns.histplot(data=df, x="math_score", hue="gender", bins=20, kde=True, palette="coolwarm", alpha=0.6)
plt.title("Math Score Distribution by Gender")
plt.xlabel("Math Score")
plt.ylabel("Frequency")
plt.grid()
plt.savefig("results/math_score_distribution_comparison.png")
plt.show()
print(" Histogram with Gender Comparison saved.")
